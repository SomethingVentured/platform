/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrowdfundFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addresses(uint256)": FunctionFragment;
    "createCrowdfund(address[],uint256[],bytes32)": FunctionFragment;
    "fundingParams(uint256)": FunctionFragment;
    "getAddresses()": FunctionFragment;
    "getFundingParams()": FunctionFragment;
    "getPoolId()": FunctionFragment;
    "logic()": FunctionFragment;
    "poolId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrowdfund",
    values: [string[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(functionFragment: "logic", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;

  events: {
    "CrowdfundDeployed(address,uint256[],address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrowdfundDeployed"): EventFragment;
}

export type CrowdfundDeployedEvent = TypedEvent<
  [string, BigNumber[], string[]] & {
    crowdfundProxy: string;
    fundingParams: BigNumber[];
    addresses: string[];
  }
>;

export class CrowdfundFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrowdfundFactoryInterface;

  functions: {
    addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    createCrowdfund(
      addresses_: string[],
      fundingParams_: BigNumberish[],
      poolId_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getFundingParams(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPoolId(overrides?: CallOverrides): Promise<[string]>;

    logic(overrides?: CallOverrides): Promise<[string]>;

    poolId(overrides?: CallOverrides): Promise<[string]>;
  };

  addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createCrowdfund(
    addresses_: string[],
    fundingParams_: BigNumberish[],
    poolId_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundingParams(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAddresses(overrides?: CallOverrides): Promise<string[]>;

  getFundingParams(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPoolId(overrides?: CallOverrides): Promise<string>;

  logic(overrides?: CallOverrides): Promise<string>;

  poolId(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createCrowdfund(
      addresses_: string[],
      fundingParams_: BigNumberish[],
      poolId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddresses(overrides?: CallOverrides): Promise<string[]>;

    getFundingParams(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPoolId(overrides?: CallOverrides): Promise<string>;

    logic(overrides?: CallOverrides): Promise<string>;

    poolId(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CrowdfundDeployed(address,uint256[],address[])"(
      crowdfundProxy?: null,
      fundingParams?: null,
      addresses?: null
    ): TypedEventFilter<
      [string, BigNumber[], string[]],
      {
        crowdfundProxy: string;
        fundingParams: BigNumber[];
        addresses: string[];
      }
    >;

    CrowdfundDeployed(
      crowdfundProxy?: null,
      fundingParams?: null,
      addresses?: null
    ): TypedEventFilter<
      [string, BigNumber[], string[]],
      {
        crowdfundProxy: string;
        fundingParams: BigNumber[];
        addresses: string[];
      }
    >;
  };

  estimateGas: {
    addresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCrowdfund(
      addresses_: string[],
      fundingParams_: BigNumberish[],
      poolId_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingParams(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    logic(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCrowdfund(
      addresses_: string[],
      fundingParams_: BigNumberish[],
      poolId_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundingParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
