/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrowdfundLogicInterface extends ethers.utils.Interface {
  functions: {
    "addresses(uint256)": FunctionFragment;
    "closeFunding()": FunctionFragment;
    "contribute(address,uint256)": FunctionFragment;
    "fundingParams(uint256)": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "logic()": FunctionFragment;
    "poolId()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemableFromTokens(uint256)": FunctionFragment;
    "status()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "logic", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableFromTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemableFromTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;

  events: {
    "BidAccepted(uint256)": EventFragment;
    "Contribution(address,uint256)": EventFragment;
    "FundingClosed(uint256)": EventFragment;
    "ReceivedERC721(uint256,address)": EventFragment;
    "Redeemed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
}

export type BidAcceptedEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type ContributionEvent = TypedEvent<
  [string, BigNumber] & { contributor: string; amount: BigNumber }
>;

export type FundingClosedEvent = TypedEvent<
  [BigNumber] & { amountRaised: BigNumber }
>;

export type ReceivedERC721Event = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; sender: string }
>;

export type RedeemedEvent = TypedEvent<
  [string, BigNumber] & { contributor: string; amount: BigNumber }
>;

export class CrowdfundLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrowdfundLogicInterface;

  functions: {
    addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    closeFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contribute(
      backer: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    logic(overrides?: CallOverrides): Promise<[string]>;

    poolId(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemableFromTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    status(overrides?: CallOverrides): Promise<[number]>;
  };

  addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  closeFunding(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contribute(
    backer: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundingParams(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  logic(overrides?: CallOverrides): Promise<string>;

  poolId(overrides?: CallOverrides): Promise<string>;

  redeem(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemableFromTokens(
    tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    closeFunding(overrides?: CallOverrides): Promise<void>;

    contribute(
      backer: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    logic(overrides?: CallOverrides): Promise<string>;

    poolId(overrides?: CallOverrides): Promise<string>;

    redeem(tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    redeemableFromTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "BidAccepted(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    BidAccepted(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "Contribution(address,uint256)"(
      contributor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; amount: BigNumber }
    >;

    Contribution(
      contributor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; amount: BigNumber }
    >;

    "FundingClosed(uint256)"(
      amountRaised?: null
    ): TypedEventFilter<[BigNumber], { amountRaised: BigNumber }>;

    FundingClosed(
      amountRaised?: null
    ): TypedEventFilter<[BigNumber], { amountRaised: BigNumber }>;

    "ReceivedERC721(uint256,address)"(
      tokenId?: null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; sender: string }
    >;

    ReceivedERC721(
      tokenId?: null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; sender: string }
    >;

    "Redeemed(address,uint256)"(
      contributor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; amount: BigNumber }
    >;

    Redeemed(
      contributor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contributor: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contribute(
      backer: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    logic(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemableFromTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      backer: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundingParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemableFromTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
