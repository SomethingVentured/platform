/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISplitterInterface extends ethers.utils.Interface {
  functions: {
    "splitETH()": FunctionFragment;
    "splitToken(address)": FunctionFragment;
    "validate()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "splitETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "splitToken", values: [string]): string;
  encodeFunctionData(functionFragment: "validate", values?: undefined): string;

  decodeFunctionResult(functionFragment: "splitETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "splitToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {};
}

export class ISplitter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISplitterInterface;

  functions: {
    splitETH(overrides?: Overrides): Promise<ContractTransaction>;

    "splitETH()"(overrides?: Overrides): Promise<ContractTransaction>;

    splitToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "splitToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validate(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    "validate()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;
  };

  splitETH(overrides?: Overrides): Promise<ContractTransaction>;

  "splitETH()"(overrides?: Overrides): Promise<ContractTransaction>;

  splitToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "splitToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validate(overrides?: CallOverrides): Promise<boolean>;

  "validate()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    splitETH(overrides?: CallOverrides): Promise<boolean>;

    "splitETH()"(overrides?: CallOverrides): Promise<boolean>;

    splitToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    "splitToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validate(overrides?: CallOverrides): Promise<boolean>;

    "validate()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    splitETH(overrides?: Overrides): Promise<BigNumber>;

    "splitETH()"(overrides?: Overrides): Promise<BigNumber>;

    splitToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "splitToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validate(overrides?: CallOverrides): Promise<BigNumber>;

    "validate()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    splitETH(overrides?: Overrides): Promise<PopulatedTransaction>;

    "splitETH()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    splitToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "splitToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
