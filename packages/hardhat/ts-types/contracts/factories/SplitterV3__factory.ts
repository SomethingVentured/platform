/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SplitterV3 } from "../SplitterV3";

export class SplitterV3__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SplitterV3> {
    return super.deploy(overrides || {}) as Promise<SplitterV3>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SplitterV3 {
    return super.attach(address) as SplitterV3;
  }
  connect(signer: Signer): SplitterV3__factory {
    return super.connect(signer) as SplitterV3__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitterV3 {
    return new Contract(address, _abi, signerOrProvider) as SplitterV3;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "percent",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "TransferETH",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "percent",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "TransferToken",
    type: "event",
  },
  {
    inputs: [],
    name: "allocationHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "percent",
        type: "uint32",
      },
    ],
    name: "amountFromPercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "percentages",
        type: "uint32[]",
      },
    ],
    name: "encodeAllocation",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "percentages",
        type: "uint32[]",
      },
    ],
    name: "executeETHSplit",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint32[]",
        name: "percentages",
        type: "uint32[]",
      },
    ],
    name: "validateAllocation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610821806100206000396000f3fe6080604052600436106100745760003560e01c80634f0e0ef31161004e5780634f0e0ef31461010d578063552173aa1461012d5780637965ff9b14610151578063fa81bb75146101715761007b565b806312913953146100805780633cd8045e146100b55780634b99ae73146100ed5761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610633565b610191565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506000546100d5906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b3480156100f957600080fd5b506100a0610108366004610633565b6101ac565b34801561011957600080fd5b506002546100d5906001600160a01b031681565b34801561013957600080fd5b5061014360015481565b6040519081526020016100ac565b34801561015d57600080fd5b5061014361016c3660046106c3565b6103b9565b34801561017d57600080fd5b5061014361018c366004610633565b6103e0565b600061019f858585856103e0565b6001541495945050505050565b60006101ba85858585610191565b610224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f416c6c6f636174696f6e20697320696e76616c69640000000000000000000000604482015260640160405180910390fd5b5060014760005b858110156103af5760006102ab88888481811061025857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061026d9190610619565b6102a68589898781811061029157634e487b7160e01b600052603260045260246000fd5b905060200201602081019061016c91906106ee565b610419565b9050806102b757600093505b7f85969c922fcef8a96679d163ec89951fce72dc20ee08befdee0768e06e36944f8888848181106102f857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061030d9190610619565b6103318589898781811061029157634e487b7160e01b600052603260045260246000fd5b88888681811061035157634e487b7160e01b600052603260045260246000fd5b905060200201602081019061036691906106ee565b604080516001600160a01b039094168452602084019290925263ffffffff1690820152821515606082015260800160405180910390a150806103a7816107ba565b91505061022b565b5050949350505050565b600060646103cd63ffffffff84168561079b565b6103d7919061077b565b90505b92915050565b6000828286866040516020016103f99493929190610708565b604051602081830303815290604052805190602001209050949350505050565b6000610425838361053c565b9050806103da57600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561047c57600080fd5b505af1158015610490573d6000803e3d6000fd5b50506002546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201889052909116935063a9059cbb92506044019050602060405180830381600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610535919061069c565b5092915050565b600080836001600160a01b03168361753090604051600060405180830381858888f193505050503d806000811461058f576040519150601f19603f3d011682016040523d82523d6000602084013e610594565b606091505b509095945050505050565b80356001600160a01b03811681146105b657600080fd5b919050565b60008083601f8401126105cc578182fd5b50813567ffffffffffffffff8111156105e3578182fd5b6020830191508360208260051b85010111156105fe57600080fd5b9250929050565b803563ffffffff811681146105b657600080fd5b60006020828403121561062a578081fd5b6103d78261059f565b60008060008060408587031215610648578283fd5b843567ffffffffffffffff8082111561065f578485fd5b61066b888389016105bb565b90965094506020870135915080821115610683578384fd5b50610690878288016105bb565b95989497509550505050565b6000602082840312156106ad578081fd5b815180151581146106bc578182fd5b9392505050565b600080604083850312156106d5578182fd5b823591506106e560208401610605565b90509250929050565b6000602082840312156106ff578081fd5b6103d782610605565b60008186825b8781101561073a5763ffffffff61072483610605565b168352602092830192919091019060010161070e565b5085919050825b8581101561076f576001600160a01b0361075a8461059f565b16825260209283019290910190600101610741565b50979650505050505050565b60008261079657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156107b5576107b56107d5565b500290565b60006000198214156107ce576107ce6107d5565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c0f7e7cd1cd9129541d13db525ea4c0cc7f8af5a3a7d7804346d05dee5695ca864736f6c63430008030033";
